Task:
A password is considered strong if below conditions are all met:
1. It has at least 6 characters and at most 20 characters.
2. It must contain at least one lowercase letter, at least one uppercase letter, and at least one
digit.
3. It must NOT contain three repeating characters in a row ("...aaa..." is weak, but "...aa...a..."
is strong, assuming other conditions are met).

Write an algorithm that takes a string s as input, and return the MINIMUM change required to
make s a strong password. If s is already strong, return 0.
Insertion, deletion or replace of any one character are all considered as one change.



Algorithm:
The algorithm has to find the number of changes required, but does not have to find the exact solution.
This means that it is enough if we find errors of the three categories and keep track of them using abstract values (numbers).

First we find the errors:
    - If the length of the password is shorter than 6, we represent this error as a negative number, meaning that it is below the required number of characters by this much.
        (i.e. the password "Fox" would have the value -3 associated with it since it would need 3 characters to reach the required number of 6)
    - If the length of the password is longer than 20, we represent this error as a positive number, meaning that it is above the limit of characters by this much
        (i.e. "12345678901234567890plus" would have the value 4 associated with it, since it is 4 characters above the limit of 20)
    - If the length of the password is between 6 and 20, we store the value 0, meaning no error of this category
        (i.e. "chicken" would have 0 as the associated value, since the number of characters is between 6 and 20)

    - We look for repeating sequences in the password, and the length of each sequence that is longer than 2 is added to a list
        (i.e. "aaabccc" would have the list [3, 3], "1066Hastings" would have an empty list, "12399999" would have the list [5])

    - We look for the missing types  in the password. If we find no digit, lower case letter or upper case letter in the sequence, we add a corresponding string to a list
        (i.e. "Fox" would have the list ["number"], chicken would have ["upperCase", "number"])

After we found the errors we use the available actions as efficiently as possible to solve the errors
    - The length of the password can be fixed by either insertion or deletion.
    - The missing type errors can be fixed by insertion or replacement
    - The repeating sequence error can be fixed by any action, but at varying efficiency:
        - The most efficient way of fixing a repeating sequence is through replacement. A single replacement can solve a sequence of 5 characters ("aaaaa", we replace the middle character -> "aa*aa").
        To handle longer sequences, we would always replace a character in every third position ("aaaaaa" -> "aa*aa*"). This is not the only solution, but it is the most efficient way of breaking up a repeating sequence.
        This also means that a single replacement would reduce the length of a sequence by 3 ("aaaaaa" -> "aa*aaa", a sequence fo 6 is reduced to 3)
        - The next action is insertion. Insertions are somewhat less efficient than replacements, since they can only reduce the length of a repeating sequence by 2 ("aaaaaa" -> "aa+aaaa").
        One insertion would be able to handle a sequence 4
        - Deletions are the least efficient method, since they only reduce the length of a sequence by one. One insertion can solve a sequence error of 3

    We have to use our actions as efficiently as possible, so we use the fact that a single action can contribute to each category of errors.
        - We sort the repeating errors list in ascending order
        - First we solve the length error, if we have one, since there is no variation here. If the password is too short we apply insertions, if it is too long, we apply deletions.
        Meanwhile we check if the applied actions solved other problems from the other two categories:
            - A deletion would reduce the length of a repeating sequence by one. This is our first number in the list in which we keep track of the repeating sequences.
            We decrease the number by one, and if it falls below 3, we delete it (meaning that sequence is solved).
            - An insertion would reduce the length of a repeating sequence by two. We decrease the first number in the list of repeating sequence errors by 2, and
            delete it if it falls below 3. We also check if there are missing type errors. If there are, we
            remove one, since we can solve it by inserting a character of that type (we don't have to know the exact character we insert.
            Choosing one that would not create a new repeating sequence problem is always possible since there are enough different characters of every type).

        - After we solved the length error, we move on to the repeating sequences errors. We solve these by insertions because they are the most efficient way, they can also solve
        missing type errors, if any remained, and we don't risk reintroducing length errors. Each insertion decreases the length of a sequence error by 3. If the length falls below 3, we delete the error. We also check if
        we can solve a missing type error, same way as we did with addition. We presume that the replaced character was not the only one of its type (this is always possible since
        the minimum length of the password is 6. We can always select a character of a type that has at least 2 instances in the password)

        * Note that we want to use our actions efficiently when dealing with repeating errors sequences. I.e. the 21 characters long password "...bbbbbaaa...",
        would have the sequences "bbbbb" and "aaa", the first being 5 characters, the second one 4 characters long. We apply deletions first, bringing "bbbbb" down to "bbbb". Then we would
        need a replacement to solve "bbbb" and another one to solve "aaa", bringing us to a total of 3 actions. If we applied the deletion to "aaa", we would solve the problem, and
        we would only need a single insertion to solve "bbbb", for a total of 2 actions. This is why we sort the list of repeating sequence errors first, and go through the actions in the
        order: deletions, insertions, replacements

        - When we run out of repeating sequence errors, we can move on to missing type errors. Each of these are solved by a replacement, so we don't risk reintroducing length errors

At the end of the process, we have the total number of actions (deletions + insertions + replacements) needed to solve all errors
